/**
* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
* 
* Copyright (c) 2016 LIBSCAPI (http://crypto.biu.ac.il/SCAPI)
* This file is part of the SCAPI project.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
* and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
* We request that any publication and/or code referring to and/or based on SCAPI contain an appropriate citation to SCAPI, including a reference to
* http://crypto.biu.ac.il/SCAPI.
* 
* Libscapi uses several open source libraries. Please see these projects for any further licensing issues.
* For more information , See https://github.com/cryptobiu/libscapi/blob/master/LICENSE.MD
*
* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
* 
*/

#pragma once

#include "Config.h"
#include "TedKrovetzAesNiWrapperC.h"
#include "GarbledBooleanCircuit.h"


struct GarbledGate;

/*
 * GarbledBooleanCircuit is a general abstract class for garbled circuits with fixed key. 
 * All garbled circuits have four main operations: 
 * 1. The garble function that creates the garbled table
 * 2. The compute function that computes a result on a garbled circuit on the input which is the keys that were chosen for each input wire. 
 * 3. The verify method is used in the case of a malicious adversary to verify that the garbled circuit 
 * created is an honest garbling of the agreed upon non garbled circuit. 
 * 4. The translate method that translates the garbled output which usually is generated by the compute() function into meaningful output (a 0/1 result, rather 
 * than the keys outputed by compute)
 * 
 *	author: Cryptography and Computer Security Research Group Department of Computer Science Bar-Ilan University (Meital Levy)
 * 
 */
class GarbledBooleanCircuitFixedKey :
	public GarbledBooleanCircuit
{
public:
	
	/**
	 * This method computes the circuit for the given input singleWiresInputKeys. 
	 * It returns a the garbled values keys for the output wires. This output can be translated via the translate() method
	 * if the translation table is set.
	 */
	void compute(block *singleWiresInputKeys,block * Output) override;


	/**
     * This is a virtual function that is implemented in the derived classes due to many changes in each derived class.
	 * This function behaves exactly as the verify method except the last phase.
     * The verify function verifies that the translation table matches the resulted output garbled values, while this function does not, rather, 
	 * it returns the resulted output garbled values. 
	 *
     * bothWiresInputKeys : both keys for each input wire. This array must be filled with both input keys
	 * emptyBothWireOutputKeys :T his array will be filled with both output keys during the process of the function. It must be empty.
     * 
     * returns : true if this GarbledBooleanCircuit is a garbling the given keys, false otherwise.
     */
	//virtual bool internalVerify(block *bothWiresInputKeys, block *emptyBothWireOutputKeys) = 0;
	

protected:

	bool isFreeXor;//A flag indicating if the user wants to use the optimization of FreeXor.

	block fixedKey;//Ô¨Åxed-key AES used for the garbling process. This will be hardcoded unless the user changes it. The fixed key
				   //optimization reduses the number of the costly setKey function of the AES prp and thus optimize the performance.
			
	
	AES_KEY aesFixedKey;//We use a pointer since new with 32 bit does not 16-align the variable by default
	
	int numOfRows;//number of rows

public:
	
	GarbledBooleanCircuitFixedKey(void);
	virtual  ~GarbledBooleanCircuitFixedKey(void) {};

	bool getIsNonXorOutputsRequired() const{ return isNonXorOutputsRequired; };

	int getNumOfRows() const { return numOfRows; };

	virtual int getGarbledTableSize() override;

protected:

	/**
	* Reads a file and fill the gates, number of parties, input indices, output indices and so on.
	* In addition initializes the member variables such as isFreeXor, isRowReduction and other variables that are set to nullptr.
	* It uses a fixed pre-defined fixed key and initializes the object accordingly.
	* It also allocates memory according to the circuit it creates, such as computedWires, garbledWires and so on. This
	* is done in the construction, rather than in the relevant function to reduce cache misses.
	*/
	void createCircuit(const char * fileName, bool isFreeXor, bool isNonXorOutputsRequired) override;



	/*
	* In some cases it is important that the output keys of each wire will not all have the same fixed delta xor
	* between the 0-wire and the 1-wire (for example when the (constructor of the circuit) garbler needs to send both outputs
	* to the party that computes the circuit, if the delta is the same it breaks the security since the delta of the
	* the entire circuit is revealed.
	*
	* This function garbles the output keys using identity gates, the computing party will need to use the version 
	* that decrypts these identity gates by turning the flag isNonXorOutputsRequired to true.
	* Garble calls this function only when this flag is true.
	*/
	void garbleOutputWiresToNoFixedDelta(block *deltaFreeXor, int nonXorIndex, block *emptyBothOutputKeys);

	/*
	* In some cases it is important that the output keys of each wire will not all have the same fixed delta xor
	* between the 0-wire and the 1-wire (for example when the (constructor of the circuit) garbler needs to send the both outputs
	* to the party that computes the circuit, if the delta is the same it breaks the security since the delta of the
	* the entire circuit is revealed.
	*
	* This function computes the identity gates that the garbeler had created.
	*/
	void computeOutputWiresToNoFixedDelta(int nonXorIndex, block * Output);

		
	/*
	* In some cases it is important that the output keys of each wire will not all have the same fixed delta xor
	* between the 0-wire and the 1-wire (for example when the (constructor of the circuit) garbler needs to send the both outputs
	* to the party that computes the circuit, if the delta is the same it breaks the security since the delta of the
	* the entire circuit is revealed.
	*
	* This function just turns the keys with fixed delta between them to the keys without delta using the seed in the same way that
	* the garble function does. It does not create a garbled table for thes identity gates since there is no use.
	* The last verification will be done in verifyTranslationTable that makes sure that the new outputs with no fixed delta
	* have signal bits matching the corresponding bit in the translation table.
	*/
	void verifyOutputWiresToNoFixedDelta(block *bothOutputsKeys);

		
};

